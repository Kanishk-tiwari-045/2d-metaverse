/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js');

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: '6.18.0',
  engine: '34b5a692b7bd79939a9a2c3ef97d816e749cda2f',
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = Extensions.getExtensionContext;
Prisma.defineExtension = Extensions.defineExtension;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
});

exports.Prisma.AvatarScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  name: 'name',
  avatarIdle: 'avatarIdle',
  avatarRun: 'avatarRun',
  creatorId: 'creatorId',
};

exports.Prisma.ElementScalarFieldEnum = {
  id: 'id',
  width: 'width',
  height: 'height',
  imageUrl: 'imageUrl',
  isStatic: 'isStatic',
  creatorId: 'creatorId',
};

exports.Prisma.MapScalarFieldEnum = {
  id: 'id',
  name: 'name',
  width: 'width',
  height: 'height',
  bgImg: 'bgImg',
  tilemapUrl: 'tilemapUrl',
  creatorId: 'creatorId',
  isTemplate: 'isTemplate',
  accessCode: 'accessCode',
  templateId: 'templateId',
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  avatarId: 'avatarId',
  avatarName: 'avatarName',
  role: 'role',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
};

exports.Prisma.SpaceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  width: 'width',
  height: 'height',
  thumbnail: 'thumbnail',
  bgImg: 'bgImg',
  tilemapUrl: 'tilemapUrl',
  ownerId: 'ownerId',
};

exports.Prisma.MapElementScalarFieldEnum = {
  id: 'id',
  mapId: 'mapId',
  elementId: 'elementId',
  x: 'x',
  y: 'y',
};

exports.Prisma.MapSpaceScalarFieldEnum = {
  id: 'id',
  mapId: 'mapId',
  spaceId: 'spaceId',
  x: 'x',
  y: 'y',
};

exports.Prisma.SpaceElementScalarFieldEnum = {
  id: 'id',
  spaceId: 'spaceId',
  elementId: 'elementId',
  x: 'x',
  y: 'y',
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  spaceId: 'spaceId',
  userId: 'userId',
  displayName: 'displayName',
  text: 'text',
  createdAt: 'createdAt',
  mapId: 'mapId',
};

exports.Prisma.User_map_visitsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  map_id: 'map_id',
  visited_at: 'visited_at',
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc',
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive',
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last',
};
exports.UserRole = exports.$Enums.UserRole = {
  admin: 'admin',
  user: 'user',
};

exports.Prisma.ModelName = {
  Avatar: 'Avatar',
  Element: 'Element',
  Map: 'Map',
  User: 'User',
  ActivityLog: 'ActivityLog',
  Space: 'Space',
  MapElement: 'MapElement',
  MapSpace: 'MapSpace',
  SpaceElement: 'SpaceElement',
  Message: 'Message',
  user_map_visits: 'user_map_visits',
};
/**
 * Create the Client
 */
const config = {
  generator: {
    name: 'client',
    provider: {
      fromEnvVar: null,
      value: 'prisma-client-js',
    },
    output: {
      value:
        '/Users/divyanshugautam/volume/projects/2d-metaverse/packages/db/src/generated/prisma',
      fromEnvVar: null,
    },
    config: {
      engineType: 'library',
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: 'darwin-arm64',
        native: true,
      },
    ],
    previewFeatures: [],
    sourceFilePath:
      '/Users/divyanshugautam/volume/projects/2d-metaverse/packages/db/prisma/schema.prisma',
    isCustomOutput: true,
  },
  relativeEnvPaths: {
    rootEnvPath: null,
    schemaEnvPath: '../../../.env',
  },
  relativePath: '../../../prisma',
  clientVersion: '6.18.0',
  engineVersion: '34b5a692b7bd79939a9a2c3ef97d816e749cda2f',
  datasourceNames: ['db'],
  activeProvider: 'postgresql',
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: 'DATABASE_URL',
        value: null,
      },
    },
  },
  inlineSchema:
    'generator client {\n  provider = "prisma-client-js"\n  output   = "../src/generated/prisma"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\nmodel Avatar {\n  id         Int     @id @default(autoincrement())\n  imageUrl   String  @map("image_url")\n  name       String  @db.VarChar(255)\n  avatarIdle String? @map("avatar_idle") // URL for idle animation spritesheet\n  avatarRun  String? @map("avatar_run") // URL for run animation spritesheet\n  creatorId  Int     @map("creator_id")\n  creator    User    @relation("AvatarCreator", fields: [creatorId], references: [id], onDelete: Cascade)\n  users      User[]  @relation("UserAvatar")\n\n  @@map("avatars")\n}\n\nmodel Element {\n  id            Int            @id @default(autoincrement())\n  width         Int\n  height        Int\n  imageUrl      String         @map("image_url")\n  isStatic      Boolean        @default(false) @map("is_static")\n  creatorId     Int            @map("creator_id")\n  creator       User           @relation("ElementCreator", fields: [creatorId], references: [id], onDelete: Cascade)\n  mapElements   MapElement[]\n  spaceElements SpaceElement[]\n\n  @@map("elements")\n}\n\nmodel Map {\n  id              Int               @id @default(autoincrement())\n  name            String            @db.VarChar(255)\n  width           Int\n  height          Int\n  bgImg           String?           @map("bg_img") // Background image URL\n  tilemapUrl      String?           @map("tilemap_url") // Tiled JSON map file URL\n  creatorId       Int               @map("creator_id")\n  isTemplate      Boolean           @default(false) @map("is_template")\n  accessCode      String?           @unique @map("access_code")\n  templateId      Int?              @map("template_id")\n  mapElements     MapElement[]\n  mapSpaces       MapSpace[]\n  creator         User              @relation("MapCreator", fields: [creatorId], references: [id], onDelete: Cascade)\n  template        Map?              @relation("MapTemplate", fields: [templateId], references: [id], onDelete: SetNull)\n  childMaps       Map[]             @relation("MapTemplate")\n  messages        Message[]\n  user_map_visits user_map_visits[]\n\n  @@map("maps")\n}\n\nmodel User {\n  id              Int               @id @default(autoincrement())\n  username        String            @unique @db.VarChar(255)\n  password        String\n  avatarId        Int?              @map("avatar_id")\n  avatarName      String?           @map("avatar_name") @db.VarChar(255)\n  role            UserRole          @default(user)\n  lastLoginAt     DateTime?         @map("last_login_at")\n  createdAt       DateTime          @default(now()) @map("created_at")\n  avatar          Avatar?           @relation("UserAvatar", fields: [avatarId], references: [id], onDelete: SetNull)\n  spaces          Space[]           @relation("SpaceOwner")\n  createdAvatars  Avatar[]          @relation("AvatarCreator")\n  createdElements Element[]         @relation("ElementCreator")\n  createdMaps     Map[]             @relation("MapCreator")\n  messages        Message[]\n  activityLogs    ActivityLog[]\n  user_map_visits user_map_visits[]\n\n  @@map("users")\n}\n\nmodel ActivityLog {\n  id     Int      @id @default(autoincrement())\n  userId Int      @map("user_id")\n  date   DateTime @db.Date\n  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, date])\n  @@index([userId, date])\n  @@map("activity_logs")\n}\n\nmodel Space {\n  id         Int            @id @default(autoincrement())\n  name       String         @db.VarChar(255)\n  width      Int\n  height     Int\n  thumbnail  String?\n  bgImg      String?        @map("bg_img") // Background image URL\n  tilemapUrl String?        @map("tilemap_url") // Tiled JSON map file URL  \n  ownerId    Int            @map("owner_id")\n  mapSpaces  MapSpace[]\n  messages   Message[]\n  elements   SpaceElement[]\n  owner      User           @relation("SpaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)\n\n  @@map("spaces")\n}\n\nmodel MapElement {\n  id        Int     @id @default(autoincrement())\n  mapId     Int     @map("map_id")\n  elementId Int     @map("element_id")\n  x         Int\n  y         Int\n  element   Element @relation(fields: [elementId], references: [id], onDelete: Cascade)\n  map       Map     @relation(fields: [mapId], references: [id], onDelete: Cascade)\n\n  @@map("map_elements")\n}\n\nmodel MapSpace {\n  id      Int   @id @default(autoincrement())\n  mapId   Int   @map("map_id")\n  spaceId Int   @map("space_id")\n  x       Int\n  y       Int\n  map     Map   @relation(fields: [mapId], references: [id], onDelete: Cascade)\n  space   Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n\n  @@unique([mapId, spaceId])\n  @@map("map_spaces")\n}\n\nmodel SpaceElement {\n  id        Int     @id @default(autoincrement())\n  spaceId   Int     @map("space_id")\n  elementId Int     @map("element_id")\n  x         Int\n  y         Int\n  element   Element @relation(fields: [elementId], references: [id], onDelete: Cascade)\n  space     Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n\n  @@map("space_elements")\n}\n\nmodel Message {\n  id          Int      @id @default(autoincrement())\n  spaceId     Int?     @map("space_id")\n  userId      Int      @map("user_id")\n  displayName String   @map("display_name") @db.VarChar(255)\n  text        String   @db.VarChar(2000)\n  createdAt   DateTime @default(now()) @map("created_at")\n  mapId       Int?     @map("map_id")\n  map         Map?     @relation(fields: [mapId], references: [id], onDelete: Cascade)\n  space       Space?   @relation(fields: [spaceId], references: [id], onDelete: Cascade)\n  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map("messages")\n}\n\nmodel user_map_visits {\n  id         Int      @id @default(autoincrement())\n  user_id    Int\n  map_id     Int\n  visited_at DateTime @default(now())\n  maps       Map      @relation(fields: [map_id], references: [id], onDelete: Cascade)\n  users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)\n\n  @@unique([user_id, map_id])\n}\n\nenum UserRole {\n  admin\n  user\n}\n',
  inlineSchemaHash:
    'a349227c960967dfc2f87fb478372061c983469154d43c32d77e6ad310a6a28b',
  copyEngine: true,
};
config.dirname = '/';

config.runtimeDataModel = JSON.parse(
  '{"models":{"Avatar":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"imageUrl","kind":"scalar","type":"String","dbName":"image_url"},{"name":"name","kind":"scalar","type":"String"},{"name":"avatarIdle","kind":"scalar","type":"String","dbName":"avatar_idle"},{"name":"avatarRun","kind":"scalar","type":"String","dbName":"avatar_run"},{"name":"creatorId","kind":"scalar","type":"Int","dbName":"creator_id"},{"name":"creator","kind":"object","type":"User","relationName":"AvatarCreator"},{"name":"users","kind":"object","type":"User","relationName":"UserAvatar"}],"dbName":"avatars"},"Element":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"width","kind":"scalar","type":"Int"},{"name":"height","kind":"scalar","type":"Int"},{"name":"imageUrl","kind":"scalar","type":"String","dbName":"image_url"},{"name":"isStatic","kind":"scalar","type":"Boolean","dbName":"is_static"},{"name":"creatorId","kind":"scalar","type":"Int","dbName":"creator_id"},{"name":"creator","kind":"object","type":"User","relationName":"ElementCreator"},{"name":"mapElements","kind":"object","type":"MapElement","relationName":"ElementToMapElement"},{"name":"spaceElements","kind":"object","type":"SpaceElement","relationName":"ElementToSpaceElement"}],"dbName":"elements"},"Map":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"width","kind":"scalar","type":"Int"},{"name":"height","kind":"scalar","type":"Int"},{"name":"bgImg","kind":"scalar","type":"String","dbName":"bg_img"},{"name":"tilemapUrl","kind":"scalar","type":"String","dbName":"tilemap_url"},{"name":"creatorId","kind":"scalar","type":"Int","dbName":"creator_id"},{"name":"isTemplate","kind":"scalar","type":"Boolean","dbName":"is_template"},{"name":"accessCode","kind":"scalar","type":"String","dbName":"access_code"},{"name":"templateId","kind":"scalar","type":"Int","dbName":"template_id"},{"name":"mapElements","kind":"object","type":"MapElement","relationName":"MapToMapElement"},{"name":"mapSpaces","kind":"object","type":"MapSpace","relationName":"MapToMapSpace"},{"name":"creator","kind":"object","type":"User","relationName":"MapCreator"},{"name":"template","kind":"object","type":"Map","relationName":"MapTemplate"},{"name":"childMaps","kind":"object","type":"Map","relationName":"MapTemplate"},{"name":"messages","kind":"object","type":"Message","relationName":"MapToMessage"},{"name":"user_map_visits","kind":"object","type":"user_map_visits","relationName":"MapTouser_map_visits"}],"dbName":"maps"},"User":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"username","kind":"scalar","type":"String"},{"name":"password","kind":"scalar","type":"String"},{"name":"avatarId","kind":"scalar","type":"Int","dbName":"avatar_id"},{"name":"avatarName","kind":"scalar","type":"String","dbName":"avatar_name"},{"name":"role","kind":"enum","type":"UserRole"},{"name":"lastLoginAt","kind":"scalar","type":"DateTime","dbName":"last_login_at"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"avatar","kind":"object","type":"Avatar","relationName":"UserAvatar"},{"name":"spaces","kind":"object","type":"Space","relationName":"SpaceOwner"},{"name":"createdAvatars","kind":"object","type":"Avatar","relationName":"AvatarCreator"},{"name":"createdElements","kind":"object","type":"Element","relationName":"ElementCreator"},{"name":"createdMaps","kind":"object","type":"Map","relationName":"MapCreator"},{"name":"messages","kind":"object","type":"Message","relationName":"MessageToUser"},{"name":"activityLogs","kind":"object","type":"ActivityLog","relationName":"ActivityLogToUser"},{"name":"user_map_visits","kind":"object","type":"user_map_visits","relationName":"UserTouser_map_visits"}],"dbName":"users"},"ActivityLog":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"userId","kind":"scalar","type":"Int","dbName":"user_id"},{"name":"date","kind":"scalar","type":"DateTime"},{"name":"user","kind":"object","type":"User","relationName":"ActivityLogToUser"}],"dbName":"activity_logs"},"Space":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"width","kind":"scalar","type":"Int"},{"name":"height","kind":"scalar","type":"Int"},{"name":"thumbnail","kind":"scalar","type":"String"},{"name":"bgImg","kind":"scalar","type":"String","dbName":"bg_img"},{"name":"tilemapUrl","kind":"scalar","type":"String","dbName":"tilemap_url"},{"name":"ownerId","kind":"scalar","type":"Int","dbName":"owner_id"},{"name":"mapSpaces","kind":"object","type":"MapSpace","relationName":"MapSpaceToSpace"},{"name":"messages","kind":"object","type":"Message","relationName":"MessageToSpace"},{"name":"elements","kind":"object","type":"SpaceElement","relationName":"SpaceToSpaceElement"},{"name":"owner","kind":"object","type":"User","relationName":"SpaceOwner"}],"dbName":"spaces"},"MapElement":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"mapId","kind":"scalar","type":"Int","dbName":"map_id"},{"name":"elementId","kind":"scalar","type":"Int","dbName":"element_id"},{"name":"x","kind":"scalar","type":"Int"},{"name":"y","kind":"scalar","type":"Int"},{"name":"element","kind":"object","type":"Element","relationName":"ElementToMapElement"},{"name":"map","kind":"object","type":"Map","relationName":"MapToMapElement"}],"dbName":"map_elements"},"MapSpace":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"mapId","kind":"scalar","type":"Int","dbName":"map_id"},{"name":"spaceId","kind":"scalar","type":"Int","dbName":"space_id"},{"name":"x","kind":"scalar","type":"Int"},{"name":"y","kind":"scalar","type":"Int"},{"name":"map","kind":"object","type":"Map","relationName":"MapToMapSpace"},{"name":"space","kind":"object","type":"Space","relationName":"MapSpaceToSpace"}],"dbName":"map_spaces"},"SpaceElement":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"spaceId","kind":"scalar","type":"Int","dbName":"space_id"},{"name":"elementId","kind":"scalar","type":"Int","dbName":"element_id"},{"name":"x","kind":"scalar","type":"Int"},{"name":"y","kind":"scalar","type":"Int"},{"name":"element","kind":"object","type":"Element","relationName":"ElementToSpaceElement"},{"name":"space","kind":"object","type":"Space","relationName":"SpaceToSpaceElement"}],"dbName":"space_elements"},"Message":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"spaceId","kind":"scalar","type":"Int","dbName":"space_id"},{"name":"userId","kind":"scalar","type":"Int","dbName":"user_id"},{"name":"displayName","kind":"scalar","type":"String","dbName":"display_name"},{"name":"text","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"mapId","kind":"scalar","type":"Int","dbName":"map_id"},{"name":"map","kind":"object","type":"Map","relationName":"MapToMessage"},{"name":"space","kind":"object","type":"Space","relationName":"MessageToSpace"},{"name":"user","kind":"object","type":"User","relationName":"MessageToUser"}],"dbName":"messages"},"user_map_visits":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"user_id","kind":"scalar","type":"Int"},{"name":"map_id","kind":"scalar","type":"Int"},{"name":"visited_at","kind":"scalar","type":"DateTime"},{"name":"maps","kind":"object","type":"Map","relationName":"MapTouser_map_visits"},{"name":"users","kind":"object","type":"User","relationName":"UserTouser_map_visits"}],"dbName":null}},"enums":{},"types":{}}'
);
defineDmmfProperty(exports.Prisma, config.runtimeDataModel);
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default;
    const engine = (await loader).default;
    return engine;
  },
};
config.compilerWasm = undefined;

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL:
      (typeof globalThis !== 'undefined' && globalThis['DATABASE_URL']) ||
      (typeof process !== 'undefined' &&
        process.env &&
        process.env.DATABASE_URL) ||
      undefined,
  },
});

if (
  (typeof globalThis !== 'undefined' && globalThis['DEBUG']) ||
  (typeof process !== 'undefined' && process.env && process.env.DEBUG) ||
  undefined
) {
  Debug.enable(
    (typeof globalThis !== 'undefined' && globalThis['DEBUG']) ||
      (typeof process !== 'undefined' && process.env && process.env.DEBUG) ||
      undefined
  );
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
